# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: {{ include "ipfs.fullname" . }}
#   namespace: {{ .Release.Namespace }}
#   labels:
#     {{- include "ipfs.labels" . | nindent 4 }}
#     app.kubernetes.io/component: ipfs
#   annotations:
#     reloader.stakater.com/auto: "true"
# spec:
#   replicas: {{ .Values.replicas }}
#   serviceName: {{ include "ipfs.fullname" . }}
#   selector:
#     matchLabels:
#       {{- include "ipfs.selectorLabels" . | nindent 6 }}
#       app.kubernetes.io/component: ipfs
#   template:
#     metadata:
#       labels:
#         {{- include "ipfs.selectorLabels" . | nindent 8 }}
#         app.kubernetes.io/component: ipfs
#     {{- with .Values.podAnnotations }}
#     annotations:
#       {{- toYaml . | nindent 6 }}
#     {{- end }}
#     spec:
#       serviceAccountName: {{ include "ipfs.serviceAccountName" . }}
#       containers:
#         - name: ipfs
#           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
#           imagePullPolicy: {{ .Values.image.pullPolicy }}
#           args:
#             - daemon
#           ports:
#             - name: swarm
#               containerPort: 4001
#               protocol: TCP
#             - name: api
#               containerPort: 5001
#               protocol: TCP
#             - name: gateway
#               containerPort: 8080
#               protocol: TCP
#           env:
#             - name: INIT_ARGS
#               value: "{{- if .Values.init.profiles }}--profile={{ .Values.init.profiles | join "," }}{{- end }}{{- if .Values.init.algorithm }} --algorithm={{ .Values.init.algorithm }}{{- end }}{{- if .Values.init.bits }} --bits={{ .Values.init.bits }}{{- end }}{{- if not (kindIs "invalid" .Values.init.emptyRepo) }} --empty-repo={{ .Values.init.emptyRepo }}{{- end }}"
#             - name: IPFS_LOGGING
#               value: {{ .Values.log.level }}
#             {{- if .Values.privateNetwork.enabled }}
#             - name: LIBP2P_FORCE_PNET
#               value: "1"
#             - name: IPFS_SWARM_KEY
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ include "ipfs.fullname" . }}
#                   key: swarm-key
#             {{- end }}
#             {{- range $i, $n := until (int .Values.replicas) }}
#               {{- if lt $i (len $.Values.service.swarm) }}
#                 {{- if and (index $.Values.service.swarm $i) (index $.Values.service.swarm $i).ipAddress }}
#             - name: IPFS_ADDRESS_ANNOUNCE_ipfs_{{ $i }}
#               value: /ip4/{{ (index $.Values.service.swarm $i).ipAddress }}/tcp/{{ (index $.Values.service.swarm $i).port }}
#                 {{- end }}
#               {{- end }}
#             {{- end }}
#           livenessProbe:
#             tcpSocket:
#               port: swarm
#           readinessProbe:
#             tcpSocket:
#               port: swarm
#           resources:
#             {{- toYaml .Values.resources | nindent 12 }}
#           volumeMounts:
#             - name: ipfs-storage
#               mountPath: /data/ipfs
#             - name: start-ipfs
#               mountPath: /usr/local/bin/start_ipfs
#               subPath: start_ipfs
#         {{- if .Values.cluster.enabled }}
#         - name: cluster
#           image: "{{ .Values.cluster.image.repository }}:{{ .Values.cluster.image.tag }}"
#           imagePullPolicy: IfNotPresent
#           env:
#             # Expose API
#             - name: CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS
#               value: /ip4/0.0.0.0/tcp/9094
#             - name: CLUSTER_SECRET
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ include "ipfs.fullname" . }}
#                   key: cluster-secret
#             {{- if .Values.cluster.restApiCredentials }}
#             - name: CLUSTER_RESTAPI_BASICAUTHCREDENTIALS
#               valueFrom:
#                 secretKeyRef:
#                   name: {{ include "ipfs.fullname" . }}
#                   key: restapi-credentials
#             {{- end }}
#             {{- range $sectionName, $sectionContent := .Values.cluster.configuration }}
#             {{- range $k, $v := $sectionContent }}
#             - name: CLUSTER_{{ $sectionName | upper }}_{{ regexReplaceAll "_" $k "" | upper }}
#               value: {{ $v | quote }}
#             {{- end }}
#             {{- end }}
#           ports:
#             - name: cluster-api
#               containerPort: 9094
#               protocol: TCP
#             - name: cluster-proxy
#               containerPort: 9095
#               protocol: TCP
#             - name: cluster-swarm
#               containerPort: 9096
#               protocol: TCP
#             {{- if .Values.metrics.enabled }}
#             - name: cluster-metrics
#               containerPort: 8888
#               protocol: TCP
#             {{- end }}
#           livenessProbe:
#             tcpSocket:
#               port: cluster-swarm
#           readinessProbe:
#             tcpSocket:
#               port: cluster-swarm
#           volumeMounts:
#             - name: cluster-storage
#               mountPath: /data/ipfs-cluster
#             - name: start-ipfs-cluster
#               mountPath: /usr/local/bin/entrypoint.sh
#               subPath: start_ipfs_cluster
#           resources:
#             {{- toYaml .Values.cluster.resources | nindent 12 }}
#         {{- end }}
#         {{- if .Values.apiProxy.enabled }}
#         - name: api-proxy
#           image: traefik:2.6
#           imagePullPolicy: IfNotPresent
#           ports:
#             - name: api-proxy
#               containerPort: 6001
#               protocol: TCP
#             {{- if .Values.metrics.enabled }}
#             - name: proxy-metrics
#               containerPort: 6002
#               protocol: TCP
#             {{- end }}
#           livenessProbe:
#             tcpSocket:
#               port: api-proxy
#           readinessProbe:
#             tcpSocket:
#               port: api-proxy
#           volumeMounts:
#             - name: traefik-conf
#               mountPath: /etc/traefik/
#           resources:
#             {{- toYaml .Values.apiProxy.resources | nindent 12 }}
#         {{- end }}
#       volumes:
#         - name: start-ipfs
#           configMap:
#             name: {{ include "ipfs.fullname" . }}
#             items:
#               - key: start_ipfs
#                 path: start_ipfs
#                 mode: 0555
#         - name: start-ipfs-cluster
#           configMap:
#             name: {{ include "ipfs.fullname" . }}
#             items:
#               - key: start_ipfs_cluster
#                 path: start_ipfs_cluster
#                 mode: 0555
#         {{- if .Values.apiProxy.enabled }}
#         - name: traefik-conf
#           configMap:
#             name: {{ include "ipfs.fullname" . }}-traefik
#         {{- end }}
#       {{- with .Values.affinity }}
#       affinity:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
#       {{- with .Values.tolerations }}
#       tolerations:
#         {{- toYaml . | nindent 8 }}
#       {{- end }}
#   volumeClaimTemplates:
#     - metadata:
#         name: ipfs-storage
#       spec:
#         accessModes:
#           {{- .Values.persistence.accessModes | toYaml | nindent 10 }}
#         resources:
#           requests:
#             storage: {{ .Values.persistence.size | quote }}
#         {{- if .Values.persistence.storageClass }}
#         storageClassName: {{ .Values.persistence.storageClass }}
#         {{- end }}
#     {{- if .Values.cluster.enabled }}
#     - metadata:
#         name: cluster-storage
#       spec:
#         accessModes:
#           {{- .Values.cluster.persistence.accessModes | toYaml | nindent 10 }}
#         resources:
#           requests:
#             storage: {{ .Values.cluster.persistence.size | quote }}
#         {{- if .Values.cluster.persistence.storageClass }}
#         storageClassName: {{ .Values.cluster.persistence.storageClass }}
#         {{- end }}
#     {{- end }}
