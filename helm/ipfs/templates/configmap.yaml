apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ipfs.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ipfs.labels" . | nindent 4 }}
    app.kubernetes.io/component: ipfs
data:
  start_ipfs: |-
    #!/bin/sh
    set -ex
    user=ipfs
    repo="$IPFS_PATH"

    if [ "$(id -u)" -eq 0 ]; then
        echo "Changing user to $user"
        # ensure folder is writable
        gosu "$user" test -w "$repo" || chown -R -- "$user" "$repo"
        # restart script with new privileges
        exec gosu "$user" "$0" "$@"
    fi

    # 2nd invocation with regular user
    ipfs version

    if [ -e "$repo/config" ]; then
        echo "Found IPFS fs-repo at $repo"
    else
        ipfs init $INIT_ARGS
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080

        # Set up the swarm key, if provided

        SWARM_KEY_FILE="$repo/swarm.key"
        SWARM_KEY_PERM=0400

        # Create a swarm key from a given environment variable
        if [ ! -z "$IPFS_SWARM_KEY" ] ; then
            echo "Copying swarm key from variable..."
            echo -e "$IPFS_SWARM_KEY" >"$SWARM_KEY_FILE" || exit 1
            chmod $SWARM_KEY_PERM "$SWARM_KEY_FILE"
        fi

        # Unset the swarm key variable
        unset IPFS_SWARM_KEY

        # Check during initialization if a swarm key was provided and
        # copy it to the ipfs directory with the right permissions
        # WARNING: This will replace the swarm key if it exists
        if [ ! -z "$IPFS_SWARM_KEY_FILE" ] ; then
            echo "Copying swarm key from file..."
            install -m $SWARM_KEY_PERM "$IPFS_SWARM_KEY_FILE" "$SWARM_KEY_FILE" || exit 1
        fi

        # Unset the swarm key file variable
        unset IPFS_SWARM_KEY_FILE

    fi

    {{- if .Values.apiProxy.enabled }}
    # make the api reachable only from inside the pod
    ipfs config Addresses.API /ip4/127.0.0.1/tcp/5001
    {{- else }}
    # make the api reachable from outside the pod
    ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001
    {{- end }}

    {{- range $k, $v := .Values.configuration }}
    ipfs config --json {{ $k | quote }} {{ $v | toJson | quote }}
    {{- end }}

    uhostname=$(echo $HOSTNAME | tr '-' '_')
    eval "aa=\$IPFS_ADDRESS_ANNOUNCE_$uhostname"
    if [ ! -z "$aa" ] ; then
        ipfs config --json Addresses.Announce "[\"$aa\"]"
    fi

    if [ ! -z "$LIBP2P_FORCE_PNET" ] ; then
        ipfs bootstrap rm --all
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '["*"]'
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["GET", "PUT", "POST"]'
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Headers '["X-Requested-With", "Range", "User-Agent"]'
    fi
    
    if [ "$HOSTNAME" != "{{ include "ipfs.fullname" . }}-0" ] ; then
        peer_id=`ipfs --api /dns4/{{ include "ipfs.fullname" . }}-0.{{ include "ipfs.fullname" . }}/tcp/5001 id -f '<id>'`
        ipfs bootstrap add /dns4/{{ include "ipfs.fullname" . }}-0.{{ include "ipfs.fullname" . }}/tcp/4001/p2p/$peer_id
    fi
    
    # use the args (deamon) from statefulset.yaml file
    exec ipfs "$@"

  start_ipfs_cluster: |-
    #!/bin/sh

    set -ex
    user=ipfs

    if [ -n "$DOCKER_DEBUG" ]; then
      set -x
    fi

    if [ `id -u` -eq 0 ]; then
        echo "Changing user to $user"
        # ensure directories are writable
        su-exec "$user" test -w "${IPFS_CLUSTER_PATH}" || chown -R -- "$user" "${IPFS_CLUSTER_PATH}"
        exec su-exec "$user" "$0" $@
    fi

    # Only ipfs user can get here
    ipfs-cluster-service --version

    if [ -e "${IPFS_CLUSTER_PATH}/service.json" ]; then
        echo "Found IPFS cluster configuration at ${IPFS_CLUSTER_PATH}"
    else
        echo "This container only runs ipfs-cluster-service. ipfs needs to be run separately!"
        echo "Initializing default configuration..."
        ipfs-cluster-service init
        
        # configure the bootstrap option for all the nodes except node 0
        if [ "$HOSTNAME" != "{{ include "ipfs.fullname" . }}-0" ]; then
            base_addr=/dns4/{{ include "ipfs.fullname" . }}-0.{{ include "ipfs.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
            if [ -n "$CLUSTER_RESTAPI_BASICAUTHCREDENTIALS" ]; then
                auth_opts="--basic-auth $CLUSTER_RESTAPI_BASICAUTHCREDENTIALS --force-http"
            fi
            until ipfs-cluster-ctl --host ${base_addr}/tcp/9094 $auth_opts id; do
                echo waiting for ${base_addr}/tcp/9094
                sleep 1
            done
            bootstrap_id=`ipfs-cluster-ctl --host ${base_addr}/tcp/9094 $auth_opts id | head -1 | cut -d ' ' -f1`
            bootstrap="--bootstrap ${base_addr}/tcp/9096/p2p/${bootstrap_id}"
        fi
    fi

    {{- if .Values.metrics.enabled }}
    extra_opts="--stats"
    {{- end }}
    exec ipfs-cluster-service $@ $bootstrap $extra_opts
