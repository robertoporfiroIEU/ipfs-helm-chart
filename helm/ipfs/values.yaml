## String to partially override aspnet-core.fullname template (will maintain the release name)
nameOverride: ""

## String to fully override aspnet-core.fullname template
fullnameOverride: ""

## The numbre of ipfs nodes to run. Use this number instead of scaling the stateful set after
## the installation, because so resources (swarm services mostly) are only scaled with this value
replicas: 3

## ipfs image configuration
image:
  repository: ipfs/go-ipfs
  pullPolicy: IfNotPresent
  tag: v0.31.0

## Log level of the ipfs node
log:
  level: INFO

## ipfs initialization configuration
init: {}
  ## configure the profiles to use for the ipfs node. See https://github.com/ipfs/kubo/blob/master/docs/config.md#profiles
  # profiles: []
  ## Cryptographic algorithm to use for key generation
  # algorithm: ed25519
  ## Number of bits to use in the generated RSA private key
  # bits: 2048
  ## Don't add and pin help files to the local storage
  # emptyRepo: false

## private network configuration
## use configuration.Bootstrap to configure the bootstrap nodes
privateNetwork:
  ## configure ipfs node in private network mode
  enabled: true
  ## swarm key to use for the private network. Automatically generated if null
  swarmKey: null

## Extra configuration to pass to ipfs
## The configuration is expressed in yaml and passed in a command `ipfs config --json`.
## Note that the values that are set here are not restored back to there default value when
## removed. You have to explicitly set them to the expected value
configuration: {}
#   Datastore.StorageMax: 10GB

## ipfs persistence configuration
##
persistence:
  ## PVC Storage Class for ipfs storage
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  storageClass: ""
  ## PVC Access Mode
  accessModes:
    - ReadWriteOnce
  ## PVC Storage Request for PostgreSQL volume
  size: 1Gi

## ipfs services configuration
service:
  ## ipfs swarm services configurations. The number of entries must match the number of replicas,
  ## as one swarm service is created for each replica in order to expose the swarm port outside
  ## the cluster
  swarm:
    - type: ClusterIP
      port: 4001
      ipAddress: null
  ## ipfs api service configuration. Note that the api may be exposed through an ingress.
  api:
    type: ClusterIP
    port: 5001
    ipAddress: null
  ## ipfs gateway service configuration. Note that the gateway may be exposed through an ingress.
  gateway:
    type: ClusterIP
    port: 8080
    ipAddress: null

## ipfs container resources
resources:
  # limits: {}
  requests:
    memory: 400Mi
    cpu: 100m

## annotations added to the pods
podAnnotations: {}

## Affinity for ipfs pods assignment
affinity: {}

# Tolerations for ipfs pods assignment
tolerations: {}

## Service account for ipfs to use.
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: { }
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Add networkpolicies
networkPolicy:
  enabled: true

## Ingress configuration
ingress:
  # activate gateway ingress
  # for backward compatibility. Please activate each ingress explicitly
  enabled: false
  # host name to use for all the ingresses
  host: "ipfs.localhost"
  #annotations:
  #  kubernetes.io/tls-acme: "true"
  # tls secret name for all the ingresses
  # secretName:
  from:
    - podSelector: {}
      namespaceSelector:
        matchLabels:
          name: ingress
  gateway:
    enabled: false
    # annotations may be specified here just for the gateway
    # annotations:
    #   kubernetes.io/tls-acme: "true"
    # host name may be specified here just for the gateway
    # host:
    # from network policy may be specified here just for the api
    # from:
    #   - podSelector: {}
    #     namespaceSelector:
    #       matchLabels:
    #         name: ingress
    # tls secret name
    # secretName:
  api:
    enabled: false
    # annotations may be specified here just for the api
    # annotations:
    #   kubernetes.io/tls-acme: "true"
    # host name may be specified here just for the gateway
    # host:
    # from network policy may be specified here just for the api
    # from:
    #   - podSelector: {}
    #     namespaceSelector:
    #       matchLabels:
    #         name: ingress
    # tls secret name
    # secretName:

## Use a proxy in front of ipfs api
apiProxy:
  enabled: false
  # use a reverse proxy to add a basic authentication to the ipfs api
  auth: false
  # a map of the users with their password. Only used with auth is true
  users: {}
  # restrict the available endpoints
  explicitEndpoints: false
  # the list of available endpoints
  endpoints: []
  # resources allocated to the proxy
  resources:
    # limits: {}
    requests:
      memory: 64Mi
      cpu: 10m

## Use ipfs cluster
cluster:
  enabled: true
  # cluster secret, automatically generated if null
  secret: null
  # rest api credentials, not used if null
  restApiCredentials: null
  image:
    repository: ipfs/ipfs-cluster
    pullPolicy: IfNotPresent
    tag: v1.1.1
  # extra configuration to pass to ipfs-cluster.
  # cluster.secret and restapi.basic_auth_credentials are sensitive values that
  # shouldn't be stored in this map
  configuration:
    metrics:
      prometheus_endpoint: /ip4/0.0.0.0/tcp/8888
  # cluster:
  #   replication_factor_min: 2
  #   consensus: raft
  persistence:
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 1Gi
  ## ipfs cluster services configuration
  service:
    ## ipfs cluster swarm configuration. Not to be confused with ipfs swarm service
    swarm:
      type: ClusterIP
      port: 9096
      ipAddress: null
    ## ipfs cluster api configuration. Not to be confused with ipfs api service
    api:
      type: ClusterIP
      port: 9094
      ipAddress: null
    ## ipfs cluster proxy configuration
    proxy:
      type: ClusterIP
      port: 9095
      ipAddress: null
  ## ipfs cluster resources requests and limits
  resources:
    # limits: {}
    requests:
      memory: 250Mi
      cpu: 100m

## activate metric collection through prometheus ServiceMonitor resources
metrics:
  enabled: false
  interval:
  scrapeTimeout:
